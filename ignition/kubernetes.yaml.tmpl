{{ define "fqdn_name" }}{{ printf "%s.%s" .node_name .node_domain }}{{ end }}
---
storage:
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: |
          {{ .node_name }}
    - path: /etc/install-cni.env
      filesystem: root
      mode: 0644
      contents:
        inline: |
          CNI_VERSION=v0.6.0
    - path: /opt/bin/get-cni-plugins
      filesystem: root
      mode: 0544
      contents:
        inline: |
          #!/bin/bash
          # Wrapper to download & install CNI plugins
          set -e
          [ -z "${CNI_VERSION}" ] && echo "CNI_VERSION must be set before running this script" && exit 1
          mkdir -p /opt/cni/bin
          [ "$(cat /opt/cni/version 2>/dev/null)" = "${CNI_VERSION}" ] && echo "CNI plugins already at version ${CNI_VERSION}" && exit 0
          curl -L "https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-amd64-${CNI_VERSION}.tgz" | tar -C /opt/cni/bin -xz
          echo "${CNI_VERSION}" > /opt/cni/version
    - path: /etc/install-kubetools.env
      filesystem: root
      mode: 0644
      contents:
        inline: |
          KUBETOOLS_VERSION=v1.9.3
    - path: /opt/bin/get-kubetools
      filesystem: root
      mode: 0544
      contents:
        inline: |
          #!/bin/bash
          # Wrapper to download & install kubeadm, kubelet, & kubectl
          set -e
          [ -z "${KUBETOOLS_VERSION}" ] && echo "KUBETOOLS_VERSION must be set before running this script" && exit 1
          mkdir -p /opt/bin /opt/kubetools
          [ "$(cat /opt/kubetools/version 2>/dev/null)" = "${KUBETOOLS_VERSION}" ] && echo "Kubetools plugins already at version ${KUBETOOLS_VERSION}" && exit 0
          curl -L https://storage.googleapis.com/kubernetes-release/release/${KUBETOOLS_VERSION}/bin/linux/amd64/'{kubeadm,kubelet,kubectl}' -o /opt/bin/#1
          chmod +x /opt/bin/{kubeadm,kubelet,kubectl}
          echo "${KUBETOOLS_VERSION}" > /opt/kubetools/version
systemd:
  units:
    - name: docker.service
      enable: true
    - name: locksmithd.service
      mask: true
    - name: install-cni.path
      enabled: true
      contents: |
        [Unit]
        Description=Watch for CNI plugin changes
        [Path]
        PathModified=/etc/cni.env
        [Install]
        WantedBy=multi-user.target
    - name: install-cni.service
      enabled: true
      contents: |
        [Unit]
        Description=Download CNI plugins as needed
        [Service]
        Type=oneshot
        EnvironmentFile=/etc/install-cni.env
        ExecStart=/opt/bin/get-cni-plugins
        [Install]
        WantedBy=multi-user.target
    - name: install-cni.path
      enabled: true
      contents: |
        [Unit]
        Description=Watch for Kubetools (kubeadm, kubelet, kubectl) changes
        [Path]
        PathModified=/etc/kubetools.env
        [Install]
        WantedBy=multi-user.target
        RequiredBy=kubelet.service
    - name: install-kubetools.service
      enabled: true
      contents: |
        [Unit]
        Description=Download Kubetools (kubeadm, kubectl, kubelet) as needed
        [Service]
        Type=oneshot
        EnvironmentFile=/etc/install-kubetools.env
        ExecStart=/opt/bin/get-kubetools
        [Install]
        WantedBy=multi-user.target
        RequiredBy=kubelet.service
{{ if index . "node_type" }}{{ if eq .node_type "controller" }}
    - name: etcd-member.service
      enable: true
      dropins:
        - name: 40-etcd-cluster.conf
          contents: |
            [Service]
            Environment="ETCD_IMAGE_TAG=v3.2.15"
            Environment="ETCD_NAME={{ .node_name }}"
            Environment="ETCD_ADVERTISE_CLIENT_URLS=http://{{ template "fqdn_name" . }}:2379"
            Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=http://{{ template "fqdn_name" . }}:2380"
            Environment="ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379"
            Environment="ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380"
            Environment="ETCD_INITIAL_CLUSTER={{ .etcd_initial_cluster }}"
            Environment="ETCD_STRICT_RECONFIG_CHECK=true"
{{ end }}{{ end }}
    - name: kubelet.service
      enable: true
      contents: |
        [Unit]
        Description=kubelet: The Kubernetes Node Agent
        Documentation=http://kubernetes.io/docs/
        [Service]
        ExecStart=/opt/bin/kubelet
        Restart=always
        StartLimitInterval=0
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
      dropins:
        - name: 10-kubeadm.conf
          contents: |
            [Service]
            Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
            Environment="KUBELET_SYSTEM_PODS_ARGS=--pod-manifest-path=/etc/kubernetes/manifests --allow-privileged=true"
            Environment="KUBELET_NETWORK_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin"
            Environment="KUBELET_DNS_ARGS=--cluster-dns=10.96.0.10 --cluster-domain=cluster.local"
            Environment="KUBELET_AUTHZ_ARGS=--authorization-mode=Webhook --client-ca-file=/etc/kubernetes/pki/ca.crt"
            Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=cgroupfs"
            Environment="KUBELET_CADVISOR_ARGS=--cadvisor-port=0"
            Environment="KUBELET_CERTIFICATE_ARGS=--rotate-certificates=true"
            ExecStart=
            ExecStart=/opt/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_SYSTEM_PODS_ARGS $KUBELET_NETWORK_ARGS $KUBELET_DNS_ARGS $KUBELET_AUTHZ_ARGS $KUBELET_CGROUP_ARGS $KUBELET_CADVISOR_ARGS $KUBELET_CERTIFICATE_ARGS $KUBELET_EXTRA_ARGS
ignition:
  config:
    append:
      - source: http://matchbox.home.es.tnv:8080/ignition?profile=ssh-auth
